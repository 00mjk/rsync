NEWS for rsync 2.6.7 (UNRELEASED)
Protocol: 29 (unchanged)
Changes since 2.6.6:

  BUG FIXES:

    - Fixed a really old bug that caused --checksum (-c) to checksum all the
      files encountered during the delete scan (ouch).

    - Made hard-links work with symlinks and devices again.

    - If a device-file/special-file changes permissions, rsync now updates the
      permissions without recreating the file.

    - If the user specifies a remote-host for both the source and destination,
      we now output a syntax error rather than trying to open the destination
      hostspec as a filename.

    - When --inplace creates a new destination file, rsync now creates it with
      permissions 0600 instead of 0000 -- this makes restarting possible when
      the transfer gets interrupted in the middle of sending a new file.

    - Reject the combination of --inplace and --sparse since the sparse-output
      algorithm doesn't work when overwriting existing data.

    - Fixed the directory name in the error that is output when pop_dir()
      fails.

    - Really fixed the parsing of a "!" entry in .cvsignore files this time.

    - If the generator gets a stat() error on a file, output it (this used to
      require at least -vv for the error to be seen).

    - If waitpid() fails or the child rsync didn't exit cleanly, we now handle
      the exit status properly and generate a better error.

    - Fixed some glitches in the double-verbose output when using --copy-dest,
      --link-dest, or --compare-dest.

    - Fixed the matching of the dont-compress items (e.g. *.gz) against files
      that have a path component containing a slash.

    - If code reading a filter/exclude file an EINTR error, rsync now clears
      the error flag on the file handle so it can keep on reading.

    - If --relative is active, the sending side cleans up trailing "/" or "/."
      suffixes to avoid triggering a bug in older rsync versions.  Also, we now
      reject a ".." dir if it would be sent as a relative dir.

    - If a non-directory is in the way of a directory and rsync is run with
      --dry-run and --delete, rsync no longer complains about not being
      able to opendir() the not-yet present directory.

  ENHANCEMENTS:

    - Added the --append option that makes rsync append data onto files
      that are longer on the source than the destination (this includes new
      files).

    - Added the --min-size=SIZE option to exclude small files from the
      transfer.

    - Added the --compress-level option to allow you to set how aggressive
      rsync's compression should be (this option implies --compress).

    - Enhanced the parsing of the SIZE value for --min-size and --max-size
      to allow easy entry of multiples of 1000 (instead of just multiples
      of 1024) and off-by-one values too (e.g. --max-size=8mb-1).

    - The options --human-readable (-h) and --si change the output of the
      --stats and the end-of-run summary to be easier to read.

    - If lutimes() and/or lchmod() are around, use them to allow the
      preservation of attributes on symlinks.

    - The --link-dest option now affects symlinks and devices (when
      possible).

    - Improved the output of hard-linked and copied files when using
      --link-dest, --copy-dest, or --compare-dest.

    - Added two config items to the rsyncd.conf parsing:  "pre-xfer exec"
      and "post-xfer exec".  These allow a command to be specified on a
      per-module basis that will be run before and/or after a daemon-mode
      transfer.  (See the manpage for a list of the environment variables
      that are set with information about the transfer.)

    - When using the --relative option, you can now insert a dot dir in
      the source path to indicate where the replication of the source dirs
      should start.  For example, if you specify a source path of
      rsync://host/module/foo/bar/./baz/dir with -R, rsync will now only
      replicate the "baz/dir" part of the source path (note: a trailing
      dot dir is unaffected unless it also has a trailing slash).

    - Added some new --no-FOO options that make it easier to override
      unwanted implied or default options.  For example, "-a --no-o" (aka
      "--archive --no-owner") can be used to turn off the preservation of
      file ownership that is implied by -a.

    - Added the --chmod=MODE option that allows the destination permissions
      to be changed from the source permissions.  E.g. --chmod=g+w,o-rwx

    - Allow the --temp-dir option to be specified when starting a daemon,
      which sets the default temporary directory for incoming files.

    - If --delete is combined with --dirs without --recursive, rsync will
      now delete in any directory whose content is being synchronized.

    - If --backup is combined with --delete without --backup-dir (and
      without --delete-excluded), we add a "protect" filter-rule to ensure
      that files with the backup suffix are not deleted.

    - The file-count stats that are output by --progress were improved to
      better indicate what the numbers mean.  For instance, the output:
      "(xfer#5, to-check=8383/9999)" indicates that this was the fifth file
      to be transferred, and we still need to check 8383 more files out of
      a total of 9999.

    - The include/exclude code now allows a dir/*** directive (with 3
      trailing stars) to match both the dir itself as well as all the
      content below the dir (dir/** would not match the dir).

    - Some minor documentation improvements.

    - Updated some diffs in the patches dir.

  INTERNAL:

    - Some buffer sizes were expanded a bit, particularly on systems where
      MAXPATHLEN is overly small (e.g. cygwin).

    - If io_printf() tries to format more data than fits in the buffer, exit
      with an error instead of transmitting a truncated buffer.

    - If a va_copy macro is defined, lib/snprintf.c will use it when defining
      the VA_COPY macro.

    - Reduced the amount of stack memory needed for each level of directory
      recursion by nearly MAXPATHLEN bytes.

    - The wildmatch function was extended to allow an array of strings to
      be supplied as the string to match.  This allows the exclude code to
      do less string copying.

    - Got rid of the safe_fname() function (and all the myriad calls) and
      replaced it with a new function in the log.c code that filters all
      the output going to the terminal.

    - Unified the f_name() and the f_name_to() functions.

  DEVELOPER RELATED:

    - Several diffs in the patches dir now use the proper --enable-FOO
      configure option instead of --with-FOO to turn on the inclusion of
      the newly patched feature.

