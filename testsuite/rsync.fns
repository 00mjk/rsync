#! /bin/sh

# Copyright (C) 2001 by Martin Pool <mbp@samba.org>

# General-purpose test functions for rsync.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version
# 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


TMP="$scratchdir"
FROM=${TMP}/from
TO=${TMP}/to
LOG=${TMP}/log
RSYNC="$rsync_bin"

runtest() {
    echo $ECHO_N "Test $1: $ECHO_C"
    if eval "$2"
    then
	echo "${ECHO_T}	done."
	return 0
    else
	echo "${ECHO_T} failed!"
	return 1
    fi
}

printmsg() {
    echo "$1"
}


####################
# Build test directories TO and FROM, with FROM full of files.

hands_setup() {
    # Clean before creation
    rm -rf $FROM
    rm -rf $TO
    
    [ -d $FROM ] || mkdir $FROM
    [ -d $TO ] || mkdir $TO

    # On some BSD systems, the umask affects the mode of created
    # symlinks, even though the mode apparently has no effect on how
    # the links behave in the future, and it cannot be changed using
    # chmod!  rsync always sets its umask to 000 so that it can
    # accurately recreate permissions, but this script is probably run
    # with a different umask. 

    # This causes a little problem that "ls -l" of the two will not be
    # the same.  So, we need to set our umask before doing any creations.

    # set up test data
    touch ${FROM}/empty
    mkdir ${FROM}/emptydir

    # a hundred lines of text or so
    ls -lR ${srcdir} > ${FROM}/filelist

    # This might fail on systems that don't have -n
    echo $ECHO_N "This file has no trailing lf$ECHO_C" > ${FROM}/nolf
    umask 0
    ln -s nolf ${FROM}/nolf-symlink
    umask 022

    cat $srcdir/*.c > ${FROM}/text
    mkdir ${FROM}/dir
    cp ${FROM}/text ${FROM}/dir
    mkdir ${FROM}/dir/subdir
    mkdir ${FROM}/dir/subdir/subsubdir
    ls -ltr /etc > ${FROM}/dir/subdir/subsubdir/etc-ltr-list
    mkdir ${FROM}/dir/subdir/subsubdir2
    ls -lt /bin > ${FROM}/dir/subdir/subsubdir2/bin-lt-list

#      echo testing head:
#      ls -lR ${srcdir} | head -10 || echo failed
}




####################
# Many machines do not have "mkdir -p", so we have to build up long paths.
# How boring.  
makepath () {
    p="$1"
    (
	# Absolut Unix.
	if echo $p | grep '^/' >/dev/null
	then
	    cd /
	fi
    
	# This will break if $1 contains a space.
	for c in `echo $p | tr '/' ' '`
	do 
	    [ -d "$c" ] || mkdir "$c" || return $? 
	    cd "$c" || return $?
	done
    )
}



###########################
# Run a test (in '$1') then compare directories $2 and $3 to see if
# there are any difference.  If there are, explain them.

checkit() {
    log=${LOG}
    failed=
    # the log accumulates all output; we only display it if there 
    # is a problem.

    echo "Running: \"$1\""  >${log}
    echo "">>${log}
    eval "$1"  >>${log} 2>&1
    status=$?
    if [ $status != 0 ]; then
	failed="YES";
    fi

    echo "-------------">>${log}
    echo "check how the files compare with diff:">>${log}
    echo "">>${log}
    diff -cr $2 $3 >>${log} 2>&1 || failed=YES
    echo "-------------">>${log}
    echo "check how the directory listings compare with diff:">>${log}
    echo "">>${log}
    ( cd $2 ; ls -laR ) > ${TMP}/ls-from 2>>${log}
    ( cd $3 ; ls -laR ) > ${TMP}/ls-to  2>>${log}
    diff -c ${TMP}/ls-from ${TMP}/ls-to >>${log} 2>&1 || failed=YES
    if [ -z "${failed}" ] ; then
	rm $log
	return 0
    else
	cat ${log}
	rm ${log}
	return 1
    fi
}


# In fact, we need a more general feature of capturing all stderr/log files,
# and dumping them if something goes wrong.

checkforlogs() {
  # skip it if we're under debian-test
  if test -n "${Debian}" ; then return 0 ; fi

  if [ -f $1 -a -s $1 ] ; then
	echo "Failures have occurred.  $1 follows:" >&2
	cat $1 >&2
	exit 1
  fi
}


build_rsyncd_conf() {
    # Build an appropriate configuration file
    conf="$scratchdir/test-rsyncd.conf"
    echo "building configuration $conf"

    port=2612
    pidfile="$scratchdir/rsyncd.pid"
    logfile="$scratchdir/rsyncd.log"

    cat >$conf <<EOF
# rsyncd configuration file autogenerated by $0

pid file = $pidfile
use chroot = no
hosts allow = localhost, 127.0.0.1
log file = $logfile

[test-from] = $scratchdir/daemon-from/
	read only = yes

[test-to] = $scratchdir/daemon-to/
	read only = no
EOF
}


