#!/usr/bin/perl
use strict;

# This script expects the directory ~/samba-rsync-ftp to exist and to be a
# copy of the /home/ftp/pub/rsync dir on samba.org.  When the script is done,
# the git repository in the current directory will be updated, and the local
# ~/samba-rsync-ftp dir will be ready to be rsynced to samba.org.

use Cwd;
use Date::Format;

my $dest = $ENV{HOME} . '/samba-rsync-ftp';

my $cl_today = time2str('* %a %b %d %Y', time);
my $ztoday = time2str('%d %b %Y', time);
(my $today = $ztoday) =~ s/^0//;

my $curdir = Cwd::cwd;

my @extra_files;
open(IN, '<', 'Makefile.in') or die "Couldn't open Makefile.in: $!\n";
while (<IN>) {
    if (s/^GENFILES=//) {
	while (s/\\$//) {
	    $_ .= <IN>;
	}
	@extra_files = split(' ', $_);
	last;
    }
}
close IN;

my $break = <<EOT;
==========================================================================
EOT

print $break, <<EOT, $break, "\n";
== This will release a new version of rsync onto an unsuspecting world. ==
EOT

die "$dest does not exist\n" unless -d $dest;
die "There is no .git dir in the current directory.\n" unless -d '.git';
die "'a' must not exist in the current directory.\n" if -e 'a';
die "'b' must not exist in the current directory.\n" if -e 'b';

open(IN, '-|', 'git status') or die $!;
my $status = join('', <IN>);
close IN;
die "The checkout is not clean:\n", $status unless $status =~ /\nnothing to commit \(working directory clean\)/;
die "The checkout is not on the master branch.\n" unless $status =~ /^# On branch master\n/;

my $lastversion;
open(IN, '<', 'configure.in') or die $!;
while (<IN>) {
    if (/^RSYNC_VERSION=(.*)/) {
	$lastversion = $1;
	last;
    }
}
close IN;
if ($lastversion =~ /dev$/) {
    open(IN, '<', 'OLDNEWS') or die $!;
    $_ = <IN>;
    close IN;
    ($lastversion) = /(\d+\.\d+\.\d+)/;
}

my $version = $lastversion;
$version =~ s/dev/pre1/ || $version =~ s/pre(\d+)/ 'pre' . ($1 + 1) /e;

print "Please enter the version number of this release: [$version] ";
chomp($_ = <STDIN>);
if ($_ eq '.') {
    $version =~ s/pre\d+//;
} elsif ($_ ne '') {
    $version = $_;
}
$version =~ s/[-.]*pre[-.]*/pre/;

print "Enter the previous version to produce a patch against: [$lastversion] ";
chomp($_ = <STDIN>);
$lastversion = $_ if $_ ne '';
$lastversion =~ s/[-.]*pre[-.]*/pre/;

my $release = 1;
print "Please enter the RPM release number of this release: [$release] ";
chomp($_ = <STDIN>);
$release = $_ if $_ ne '';

my $diffdir;
my $skipping;
if ($lastversion =~ /pre/) {
    if ($version !~ /pre/) {
	die "You should not diff a release version against a pre-release version.\n";
    }
    $diffdir = "$dest/old-previews";
    $skipping = ' ** SKIPPING **';
} elsif ($version =~ /pre/) {
    $diffdir = $dest;
    $skipping = ' ** SKIPPING **';
} else {
    $diffdir = "$dest/old-versions";
    $skipping = '';
}

print "\n", $break, <<EOT;
\$version is "$version"
\$lastversion is "$lastversion"
\$dest is "$dest"
\$curdir is "$curdir"
\$diffdir is "$diffdir"
\$release is "$release"

About to:
    - make sure that SUBPROTOCOL_VERSION is 0$skipping
    - tweak the version in configure.in and the spec files
    - tweak NEWS and OLDNEWS to update the release date$skipping
    - tweak the date in the *.yo files and generate the man pages
    - generate configure.sh, config.h.in, and proto.h
    - page through the differences

EOT
print "<Press Enter to continue> ";
$_ = <STDIN>;

my @tweak_files = ( glob('packaging/*.spec'), glob('packaging/*/*.spec'),
		    glob('*.yo'), qw( configure.in ) );

if ($version !~ /pre/) {
    push(@tweak_files, qw( rsync.h NEWS OLDNEWS ));
}
foreach my $fn (@tweak_files) {
    open(IN, '<', $fn) or die $!;
    undef $/; $_ = <IN>; $/ = "\n";
    close IN;
    if ($fn =~ /configure/) {
	s/^RSYNC_VERSION=.*/RSYNC_VERSION=$version/m;
    } elsif ($fn =~ /\.spec/) {
	s/^(Version:) .*/$1 $version/m;
	s/^(Release:) .*/$1 $release/m;
	s/^(Released) .*/$1 $version./m;
	s/^\* \w\w\w \w\w\w \d\d \d\d\d\d (.*)/$cl_today $1/m;
    } elsif ($fn =~ /\.yo/) {
	s/^(manpage\([^)]+\)\(\d+\)\()[^)]+(\).*)/$1$today$2/m;
	s/^(This man ?page is current for version) \S+ (of rsync)/$1 $version $2/m;
    } elsif ($fn eq 'NEWS') {
	s/^(NEWS for rsync \Q$version\E) \(UNRELEASED\)\s*\n/$1 ($today)\n/mi
	    or die "Couldn't update NEWS file with release date!\n";
    } elsif ($fn eq 'rsync.h') {
	s/(#define\s+SUBPROTOCOL_VERSION)\s+\d+/$1 0/;
    } elsif ($fn eq 'OLDNEWS') {
	s/^\t\S\S\s\S\S\S\s\d\d\d\d(\t\Q$version\E)/\t$ztoday$1/m
	    or die "Couldn't update OLDNEWS file with release date!\n";
    } else {
	die "Unrecognized file in \@tweak_files: $fn\n";
    }
    open(OUT, '>', $fn) or die $!;
    print OUT $_;
    close OUT;
}

print $break;
system "git diff --color | less -p '^diff .*'";

my $srctar_name = "rsync-$version.tar.gz";
my $pattar_name = "rsync-patches-$version.tar.gz";
my $diff_name = "rsync-$lastversion-$version.diffs.gz";
my $srctar_file = "$dest/$srctar_name";
my $pattar_file = "$dest/$pattar_name";
my $diff_file = "$dest/$diff_name";
my $lasttar_file = "$dest/rsync-$lastversion.tar.gz";

print $break, <<EOT;

About to:
    - commit all changes
    - tag this release as v$version
    - move the old tar/diff files into the appropriate old-* dirs
    - hard-link the moved tar/diff files on samba.org
    - create release tar, "$srctar_name"
    - create patches tar, "$pattar_name"
    - create release diffs, "$diff_name"
    - update patch branches and generate patch/* files
    - update README, *NEWS, TODO, and ChangeLog
    - update rsync*.html man pages
    - gpg-sign the release files

EOT
print "<Press Enter to continue> ";
$_ = <STDIN>;

system "git commit -a -m 'Preparing for release of $version'" and exit 1;
system "git tag -s -m 'Version $version.' v$version" and exit 1;

# Extract some files from the old tar before we do the shuffle.
@_ = @extra_files;
map { s#^#rsync-$lastversion/# } @_;
system "tar xzf $lasttar_file @_";
rename("rsync-$lastversion", 'a');

# When creating a pre-release after a normal release, there's nothing to move.
if ($diffdir ne $dest) {
    chdir($dest) or die $!;

    print "Shuffling old files ...\n";

    # We need to run this regardless of $lastversion's "pre"ness.
    my @moved_files;
    foreach my $fn (glob('rsync*pre*.tar.gz*'), glob('rsync*pre*-NEWS')) {
	link($fn, "old-previews/$fn") or die $!;
	push(@moved_files, $fn);
    }

    if ($version !~ /pre/) {
	foreach my $fn (glob('rsync*.tar.gz*'), glob('rsync*-NEWS')) {
	    next if $fn =~ /^rsync.*pre/;
	    link($fn, "old-versions/$fn") or die $!;
	    push(@moved_files, $fn);
	}

	foreach my $fn (glob('rsync*pre*.diffs.gz*')) {
	    unlink($fn);
	}

	foreach my $fn (glob('rsync*.diffs.gz*')) {
	    link($fn, "old-patches/$fn") or die $!;
	    push(@moved_files, $fn);
	}
    }

    # Optimize our future upload (in the absence of --detect-renamed) by
    # using rsync to hard-link the above files on samba.org.
    system "rsync -avHOC --include='rsync*.gz*' --include='old-*/' --exclude='*' . samba.org:/home/ftp/pub/rsync";
    foreach (@moved_files) {
	unlink($_);
    }

    chdir($curdir) or die $!;
}

print "Creating $diff_file ...\n";
system "./config.status Makefile; make gen; rsync -a @extra_files b/";
my $sed_script = 's:^((---|\+\+\+) [ab]/[^\t]+)\t.*:\1:';
system "(git diff v$lastversion v$version; diff -up a b | sed -r '$sed_script') | gzip -9 >$diff_file";
system "rm -rf a";
rename('b', "rsync-$version");

print "Creating $srctar_file ...\n";
system "git archive --format=tar --prefix=rsync-$version/ v$version | tar xf -";
system "support/git-set-file-times --prefix=rsync-$version/";
system "fakeroot tar czf $srctar_file rsync-$version; rm -rf rsync-$version";

mkdir("rsync-$version", 0755);
mkdir("rsync-$version/patches", 0755);
system "support/patch-update --skip-check --gen=rsync-$version/patches";
system "fakeroot tar chzf $pattar_file rsync-$version/patches; rm -rf rsync-$version";

print "Updating the other files in $dest ...\n";
system "rsync -a README NEWS OLDNEWS TODO $dest";
unlink("$dest/rsync-$version-NEWS");
link("$dest/NEWS", "$dest/rsync-$version-NEWS");
system "git log --name-status | gzip -9 >$dest/ChangeLog.gz";

system "yodl2html -o $dest/rsync.html rsync.yo";
system "yodl2html -o $dest/rsyncd.conf.html rsyncd.conf.yo";

chdir($dest) or die $!;
system "gpg -ba $srctar_name; gpg -ba $pattar_name; gpg -ba $diff_name";
print $break, <<EOT;

All done.  Remember to announce the release on *BOTH*
rsync-announce\@lists.samba.org and rsync\@lists.samba.org!
EOT
